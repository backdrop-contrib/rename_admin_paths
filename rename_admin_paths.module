<?php
/**
 * @file
 * Allows users to rename admin paths.
 */

/**
 * Implements hook_permission().
 */
function rename_admin_paths_permission() {
  return array(
    'administer path admin' => array(
      'title' => t('Administer path admin'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function rename_admin_paths_menu() {
  $items['admin/config/user-interface/rename-admin-paths'] = array(
    'title' => 'Rename Admin Paths',
    'description' => 'Configure how to rename admin paths.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('rename_admin_paths_settings'),
    'access arguments' => array('administer path admin'),
  );

  return $items;
}

/**
 * Implements hook_outbound_alter().
 */
function rename_admin_paths_url_outbound_alter(&$path, &$options, $original_path) {
  if (empty($path)) {
    return;
  }
  $config = config('rename_admin_paths.settings');

  // Admin path.
  if ($config->get('rename_admin_path')) {
    $rename_admin_path_value = $config->get('rename_admin_path_value');

    // Replace admin in path.
    if (preg_match('|^admin(?![^/])(.*)|', $path, $matches)) {
      $path = urlencode($rename_admin_path_value) . $matches[1];
    }

    if (!empty($options['query']['destination'])) {
      // Replace admin in the destination. Take care of the possible presence
      // of %2F, which represents the forward slash (/).
      if (preg_match('/^admin(?:(?![^\/])|(?!(?!\%2F)))(.*)/', $options['query']['destination'], $matches)) {
        $options['query']['destination'] = urlencode($rename_admin_path_value) . $matches[1];
      }
    }
  }

  // Now user path.
  if ($config->get('rename_user_path')) {
    $rename_user_path_value = $config->get('rename_user_path_value');

    // Replace user in path.
    if (preg_match('|^user(?![^/])(.*)|', $path, $matches)) {
      $path = urlencode($rename_user_path_value) . $matches[1];
    }

    if (!empty($options['query']['destination'])) {
      // Replace user in the destination.
      if (preg_match('/^user(?:(?![^\/])|(?!(?!\%2F)))(.*)/', $options['query']['destination'], $matches)) {
        $options['query']['destination'] = urlencode($rename_user_path_value) . $matches[1];
      }
    }
  }
}

/**
 * Implements hook_inbound_alter().
 */
function rename_admin_paths_url_inbound_alter(&$path, $original_path, $path_language) {
  static $once = FALSE;

  // Prevent the second call by module that invokes backdrop_path_initialize().
  // @see http://drupal.org/node/1703242
  if ($once) {
    return;
  }
  $once = TRUE;

  // @see https://www.drupal.org/sa-contrib-2022-033
  require_once BACKDROP_ROOT . '/core/includes/transliteration.inc';
  $normalized_path = transliteration_get($original_path, '', 'en');

  $config = config('rename_admin_paths.settings');

  // Admin path.
  if ($config->get('rename_admin_path')) {
    $rename_admin_path_value = $config->get('rename_admin_path_value');

    // Get back default admin path.
    if (preg_match('|^' . urlencode($rename_admin_path_value) . '(?![^/])(.*)|', $path, $matches)) {
      $path = 'admin' . $matches[1];
    }

    // Get 404 for default admin path.
    if (preg_match('|^admin(?![^/])|i', $normalized_path)) {
      $path = '404';
    }
  }

  // User path.
  if ($config->get('rename_user_path')) {
    $rename_user_path_value = $config->get('rename_user_path_value');

    // If there is a url alias for user/*, make sure that this url alias stays
    // accessible.
    // @see http://drupal.org/node/1331770
    if ($path != $original_path && backdrop_get_path_alias($path) == $original_path) {
      $original_path = str_ireplace('user', 'people', $path);
    }

    // Get back default user path.
    if (preg_match('|^' . urlencode($rename_user_path_value) . '(?![^/])(.*)|i', $path, $matches)) {
      $path = 'user' . $matches[1];
    }

    // Get 404 for default user path.
    if (preg_match('|^user(?![^/])|i', $normalized_path)) {
      $path = '404';
    }
  }
}

/**
 * Implements hook_admin_paths_alter().
 */
function rename_admin_paths_admin_paths_alter(&$paths) {

  // Check if enabled.
  $config = config('rename_admin_paths.settings');
  if ($config->get('rename_admin_path') || $config->get('rename_admin_path')) {
    foreach ($paths as $path => $enable) {

      // Add renamed admin paths.
      if ($config->get('rename_admin_path')) {
        $rename_admin_path_value = $config->get('rename_admin_path_value');
        $renamed_path = preg_replace('|^admin(?![^/])|', $rename_admin_path_value, $path);
        $paths[$renamed_path] = $enable;
      }

      // Replace "user" in administrative paths.
      if ($config->get('rename_user_path')) {
        $rename_user_path_value = $config->get('rename_user_path_value');
        $renamed_path = preg_replace('|^user(?![^/])|', $rename_user_path_value, $path);
        $paths[$renamed_path] = $enable;
      }
    }
  }
}

/**
 * Settings form().
 */
function rename_admin_paths_settings() {
  $form = array();
  $config = config('rename_admin_paths.settings');
  $form['#config'] = 'rename_admin_paths.settings';

  $form['rename_admin_path'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rename admin path'),
  );

  $form['rename_admin_path']['rename_admin_path'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rename admin path'),
    '#default_value' => $config->get('rename_admin_path'),
    '#description' => t('If checked, "admin" will be replaced by the following term in admin path.'),
  );

  $form['rename_admin_path']['rename_admin_path_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Replace "admin" in admin path by'),
    '#default_value' => $config->get('rename_admin_path_value'),
    '#description' => t('This value will replace "admin" in admin path.'),
    '#element_validate' => array('rename_admin_paths_form_validate_path_field'),
    '#required' => TRUE,
  );

  $form['rename_user_path'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rename user path'),
  );

  $form['rename_user_path']['rename_user_path'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rename user path'),
    '#default_value' => $config->get('rename_user_path'),
    '#description' => t('If checked, "user" will be replaced by the following term in user path.'),
    '#element_validate' => array('rename_admin_paths_form_validate_path_field'),
  );

  $form['rename_user_path']['rename_user_path_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Replace "user" in user path by'),
    '#default_value' => $config->get('rename_user_path_value'),
    '#description' => t('This value will replace "user" in user path.'),
    '#element_validate' => array('rename_admin_paths_form_validate_path_field'),
    '#required' => TRUE,
  );

  $form['#submit'][] = 'rename_admin_paths_settings_submit';

  return system_settings_form($form);
}

/**
 * Validation for paths values.
 */
function rename_admin_paths_form_validate_path_field($element, &$form_state) {
  // Force path replacement values to contain only lowercase letters, numbers,
  // and underscores.
  if (!preg_match('!^[a-z0-9_]+$!i', $element['#value'])) {
    form_error($element, t('Path replacement value must contain only lowercase letters, numbers, and underscores.'));
  }
}

/**
 * Settings form submit.
 */
function rename_admin_paths_settings_submit() {
  // Flush admin menu.
  if (module_exists('admin_bar')) {
    cache('admin_bar')->flush();
  }
}

/**
 * Implements hook_config_info().
 */
function rename_admin_paths_config_info() {
  $prefixes['rename_admin_paths.settings'] = array(
    'label' => t('Rename Admin Paths settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
